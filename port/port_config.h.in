// Copyright 2017 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_PORT_PORT_CONFIG_H_
#define STORAGE_LEVELDB_PORT_PORT_CONFIG_H_

// Define to 1 if you have a definition for fdatasync() in <unistd.h>.
#if !defined(HAVE_FDATASYNC)
#cmakedefine01 HAVE_FDATASYNC
#endif  // !defined(HAVE_FDATASYNC)

// Define to 1 if you have a definition for F_FULLFSYNC in <fcntl.h>.
#if !defined(HAVE_FULLFSYNC)
#cmakedefine01 HAVE_FULLFSYNC
#endif  // !defined(HAVE_FULLFSYNC)

// Define to 1 if you have a definition for O_CLOEXEC in <fcntl.h>.
#if !defined(HAVE_O_CLOEXEC)
#cmakedefine01 HAVE_O_CLOEXEC
#endif  // !defined(HAVE_O_CLOEXEC)

// Define to 1 if you have Google CRC32C.
#if !defined(HAVE_CRC32C)
#cmakedefine01 HAVE_CRC32C
#endif  // !defined(HAVE_CRC32C)

// Define to 1 if you have Google Snappy.
#if !defined(HAVE_SNAPPY)
#cmakedefine01 HAVE_SNAPPY
#endif  // !defined(HAVE_SNAPPY)

// Define to 1 if you have Zstd.
#if !defined(HAVE_Zstd)
#cmakedefine01 HAVE_ZSTD
#endif  // !defined(HAVE_ZSTD)

#endif  // STORAGE_LEVELDB_PORT_PORT_CONFIG_H_

/*
port_config.h.in 文件的作用是作为一个模板文件，用于生成最终的 port_config.h 头文件。

通常，在软件构建过程中，CMake 或类似的构建工具会根据项目的配置选项和目标平台生成一个配置文件。
这个配置文件包含了一些宏定义和预处理指令，用于根据不同的环境和选项来配置软件的功能和行为。
这个过程中，.in 扩展名的文件充当了一个模板，其中包含了占位符或标记，用于在构建过程中被实际的值替换。

在这种情况下，port_config.h.in 文件是一个用于生成 port_config.h 头文件的模板文件。
它包含了一些预定义的宏和条件语句，用于根据系统环境和配置选项来配置 LevelDB 的特性和选项。
在构建过程中，CMake 会将 port_config.h.in 复制并重命名为 port_config.h，
然后根据实际情况替换其中的占位符或标记，生成最终的 port_config.h 头文件。

通过使用模板文件，开发人员可以在不同的构建环境和配置选项下灵活地生成配置文件，并实现相应的功能定制。
这种模板化的方法可以提高软件的可配置性和可移植性。

在CMakeLists.txt文件中
configure_file(
  "port/port_config.h.in"
  "${PROJECT_BINARY_DIR}/${LEVELDB_PORT_CONFIG_DIR}/port_config.h"
)
利用cmake生成了port_config.h文件在/build/include/port文件夹下

*/