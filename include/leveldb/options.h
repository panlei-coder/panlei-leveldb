// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <cstddef>

#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
// 数据库内容存储在一组块中，每个块保存键值对的序列。
// 每个块在被存储到文件之前可能会被压缩。
// 下面的enum描述了用于压缩块的压缩方法(如果有的话)。
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression = 0x0, // 无压缩
  kSnappyCompression = 0x1, // snappy压缩
  kZstdCompression = 0x2, // zstd压缩
};

// Options to control the behavior of a database (passed to DB::Open)
struct LEVELDB_EXPORT Options {
  // Create an Options object with default values for all fields.
  // 为所有字段创建一个默认值的Options对象。
  Options();

  // -------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  // 用于定义表中键的顺序的比较器。
  // 默认:一个比较器，使用字典按字节顺序排序
  //
  // 要求:客户端必须确保提供了比较器
  // 这里有相同的名称和订单键*完全*相同的
  // 比较器提供给以前在同一DB上的公开调用。
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  // 如果为true，则在数据库缺失时创建该数据库。
  bool create_if_missing = false;

  // If true, an error is raised if the database already exists.
  // 如果数据库已经存在，则会引发错误。
  bool error_if_exists = false;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.

  // 如果为true，实现将对正在处理的数据进行积极检查，如果检测到任何错误，将提前停止。
  // 这可能会产生不可预见的后果:例如，一个数据库的损坏变得不可读，或者整个数据库变得不可打开。
  bool paranoid_checks = false;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  // 使用指定的对象与环境进行交互;
  // 例如读写文件，安排后台工作等。
  // 默认值:Env::Default()
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  // 如果info_log的值为非空，则db产生的任何内部进度/错误信息将被写入到info_log中;
  // 如果info_log的值为空，则写入到与db内容相同目录下的文件中。
  Logger* info_log = nullptr; // 日志句柄

  // -------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  // 在转换为已排序的磁盘文件之前，需要在内存中建立的数据量(由磁盘上未排序的日志支持)。
  // 较大的值可以提高性能，特别是在批量加载时。
  // 最多可以同时在内存中保存两个写缓冲区，因此您可能希望调整此参数以控制内存使用。
  // 另外，更大的写缓冲区将导致下次打开数据库时更长的恢复时间。
  /*
  （1）值大有利于性能提升
  （2）但是内存肯会存在两份，太大需要注意内存溢出OOM
  （3）过大刷盘之后，不利于数据恢复
  */
  size_t write_buffer_size = 4 * 1024 * 1024; // 默认为4MB

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  // 数据库可以使用的打开文件数。如果数据库的工作集很大(每2MB的工作集预算一个打开文件)，则可能需要增加这个值。
  int max_open_files = 1000;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).
  // 控制块(用户数据存储在一组块中，块是从磁盘读取的单位)。
  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  // 如果非空，使用指定的缓存块。
  // 如果为空，leveldb将自动创建并使用8MB的内部缓存。
  Cache* block_cache = nullptr; // block缓存

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  // 每个块打包的用户数据的大致大小。注意，这里指定的块大小对应于未压缩的数据。
  // 如果启用了压缩，从磁盘读取的单元的实际大小可能会更小。该参数可以动态修改。
  size_t block_size = 4 * 1024; // 每个block的数据包大小（未压缩）

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  // 键增量编码的重启点之间的键数。该参数可以动态修改。大多数客户端不应该使用这个参数。
  int block_restart_interval = 16; // @todo ？？？block中记录完整key的间隔

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  // 在切换到一个新文件之前，Leveldb会将这个字节数写入一个文件。
  // 大多数客户端不应该使用这个参数。但是，如果您的文件系统处理较大的文件效率更高，
  // 则可以考虑增加该值。缺点是压缩时间更长，因此延迟/性能问题更长。
  // 增加此参数的另一个原因可能是当您最初填充大型数据库时。
  size_t max_file_size = 2 * 1024 * 1024; // 生成新文件的阈值（对于性能较好的文件系统可以调大该阈值，但会增加数据恢复的时间）

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  /*
  使用指定的压缩算法压缩块。该参数可以动态修改。默认值:kSnappyCompression，它提供轻量级但快速的压缩。
  kSnappyCompression在Intel(R) Core(TM)2 2.4GHz处理器上的典型速度:
    ~ 200 - 500 MB/s 压缩
    ~ 400 - 800 MB/s 解压缩
  请注意，这些速度明显快于大多数持久存储速度，因此通常不值得切换到kNoCompression。
  即使输入数据不可压缩，kSnappyCompression实现也会有效地检测到这一点，并切换到未压缩模式。
  */
  CompressionType compression = kSnappyCompression;

  // Compression level for zstd.
  // Currently only the range [-5,22] is supported. Default is 1.
  // zstd的压缩级别。
  // 当前只支持[-5,22]范围。默认值为1。
  int zstd_compression_level = 1;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  //
  // Default: currently false, but may become true later.
  // EXPERIMENTAL:如果为true，则追加到现有的MANIFEST和日志文件
  // 打开数据库。这可以显著加快打开速度。
  //
  // 默认值:当前为false，但以后可能变为true。
  bool reuse_logs = false; // 是否复用之前的MANIFES和log files

  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  // 如果非空，使用指定的过滤策略减少磁盘读取。
  // 许多应用程序将受益于传递NewBloomFilterPolicy()的结果。
  const FilterPolicy* filter_policy = nullptr; // block块中的过滤策略，支持布隆过滤器
};

// Options that control read operations
// 控制读操作的选项
struct LEVELDB_EXPORT ReadOptions {
  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  // 如果为true，所有从底层存储读取的数据将根据相应的校验和进行验证。
  bool verify_checksums = false; 

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  // 该迭代读取的数据应该缓存在内存中吗?
  // 对于批量扫描，调用者可能希望将此字段设置为false。
  bool fill_cache = true; // 读取到block数据，是否加入到cache中

  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  // 如果"snapshot"非空，读取所提供的快照(该快照必须属于正在读取的DB，并且必须未被释放)。
  // 如果"snapshot"为null，则使用该读操作开始时的状态的隐式快照。
  const Snapshot* snapshot = nullptr;
};

// Options that control write operations
struct LEVELDB_EXPORT WriteOptions {
  WriteOptions() = default;

  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  // 如果为true，在认为写操作完成之前，将从操作系统缓冲区缓存中刷新(通过调用WritableFile::Sync())。
  // 如果此标志为真，则写入速度会变慢。如果此标志为假，并且机器崩溃，则可能丢失最近的一些写操作。
  // 注意，如果只是进程崩溃(即机器没有重新启动)，即使sync==false也不会丢失写操作。
  // 换句话说，一个带有sync==false的数据库写入操作与“write()”系统调用具有类似的崩溃语义。
  // 使用sync==true的DB写入具有类似于“write()”系统调用后跟“fsync()”的崩溃语义。
  bool sync = false; // 是否同步刷盘，也就是调用完write之后是否需要实现fsync
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
